{"version":3,"sources":["ChessTimer.tsx","Moves.tsx","orn.png","SideBar.tsx","Magic.png","MainGame.tsx","IntroInputField.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useTimer","initialTime","active","ret","useState","timer","setTimer","useEffect","timerID","setInterval","clearInterval","ChessTimer","convertToTwoDigits","value","valueAsString","toString","test","Math","trunc","Moves","props","chess","history","verbose","filter","move","color","player","map","idx","from","to","Border","styled","div","SideBar","marked","playerColor","showTimer","src","orn","alt","Pieces","p","n","b","r","q","k","syns","MessageBox","Chess","require","MainGame","bPlayer","wPlayer","playTime","fen","setFen","useSpeechRecognition","transcript","resetTranscript","listening","setFrom","setTo","selectedSquare","setSelectedSquare","error","setError","whitesTurn","turn","wTimer","setWTimer","bTimer","setBTimer","lastMoveTime","setLastMoveTime","norm","toLowerCase","syn","replaceAll","normalizeTranscript","console","log","transcriptedFull","match","squares","substring","trim","length","pieceMove","transcriptedPart","identifiedPiece","Object","entries","reduce","acc","key","some","includes","undefined","toSquare","replace","possibleMoves","SQUARES","square","s","get","type","moves","x","checkContainsPiece","undoMove","handleMove","toggleListening","SpeechRecognition","stopListening","startListening","continuous","language","handleKeypress","e","code","preventDefault","window","addEventListener","removeEventListener","undo","wTime","bTime","className","onClick","magic","disabled","id","width","position","onDrop","sourceSquare","targetSquare","promotion","squareStyles","backgroundColor","onSquareClick","onMouseOverSquare","IntroInputField","setbPlayer","setwPlayer","setPlayTime","onSubmit","handleSubmit","required","onChange","target","parseInt","Container","App","gameHasStarted","setGameHasStarted","bName","wName","playingTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6deca85.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nexport const useTimer = (initialTime: number, active: boolean) => {\n    const ret = useState<number>(initialTime)\n    const [timer, setTimer] = ret\n    useEffect(() => {\n        let timerID = setInterval(() => {\n            if (timer > 0 && active) {\n                setTimer(timer - 1)\n            }\n            if (timer === 0) {\n                clearInterval(timerID)\n            }\n        }, 1000)\n        return () => {\n            clearInterval(timerID)\n        }\n    }, [setTimer, timer, active])\n\n    return ret\n}\n\nconst ChessTimer = ({ timer }: { timer: number }) => {\n    const convertToTwoDigits = (value: number) => {\n        const valueAsString = value.toString()\n        if (!/^[0-9]$/.test(valueAsString)) {\n            return value\n        } else {\n            return '0' + valueAsString\n        }\n    }\n\n    return (\n        <div>\n            {convertToTwoDigits(Math.trunc(timer / (60 * 60)))}:\n            {convertToTwoDigits(Math.trunc(timer / 60) % 60)}:\n            {convertToTwoDigits(timer % 60)}\n        </div>\n    )\n}\n\nexport default ChessTimer\n","import React from 'react'\nimport { ChessInstance } from 'chess.js'\n\nconst Moves = (props: { chess: ChessInstance | null; player: string }) => {\n    if (props.chess) {\n        return (\n            <div>\n                {props.chess\n                    .history({ verbose: true })\n                    .filter((move) => move.color === props.player)\n                    .map((move, idx) => (\n                        <div key={move.from + move.to}>\n                            {idx + 1}. from {move.from} to {move.to}\n                        </div>\n                    ))}\n            </div>\n        )\n    }\n\n    return null\n}\n\nexport default Moves\n","export default __webpack_public_path__ + \"static/media/orn.1d5d535f.png\";","import React from 'react'\nimport ChessTimer from './ChessTimer'\nimport Moves from './Moves'\nimport styled from 'styled-components'\nimport { ChessInstance } from 'chess.js'\nimport orn from './orn.png'\n\nconst Border = styled.div`\n    margin: 50;\n`\n\nconst SideBar = ({\n    player,\n    marked,\n    chess,\n    playerColor,\n    timer,\n    showTimer,\n}: {\n    player: string\n    playTime: number\n    marked: boolean\n    chess: ChessInstance\n    timer: number\n    playerColor: string\n    showTimer: boolean\n}) => {\n    return (\n        <Border marked={marked} player={playerColor}>\n            <h2>{player}</h2>\n            <img src={orn} alt=\"\" />\n            {marked && <h3>It is your turn!</h3>}\n            {showTimer && <ChessTimer timer={timer} />}\n            <Moves chess={chess} player={playerColor} />\n        </Border>\n    )\n}\n\nexport default SideBar\n","export default __webpack_public_path__ + \"static/media/Magic.cc753f6b.png\";","import React, { useState, useEffect, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Layout, Space } from 'antd'\nimport SideBar from './SideBar'\nimport magic from './Magic.png'\n\nimport './App.css'\nimport Chessboard from 'chessboardjsx'\nimport { ChessInstance, ShortMove, Square } from 'chess.js'\nimport SpeechRecognition, {\n    useSpeechRecognition,\n} from 'react-speech-recognition'\nimport Sider from 'antd/lib/layout/Sider'\nimport { Content } from 'antd/lib/layout/layout'\nimport { useTimer } from './ChessTimer'\n\nexport const Pieces = {\n    p: ['pawn', 'phone', 'on', 'born', 'palm'],\n    n: ['knight', 'night', 'light'],\n    b: ['bishop'],\n    r: ['rook', 'rock'],\n    q: ['queen'],\n    k: ['king'],\n}\n\nexport const syns = [\n    ['see', 'c'],\n    ['die', 'd'],\n    ['for', '4'],\n    ['andy', 'undo'],\n    ['andrew', 'undo'],\n]\n\nexport const normalizeTranscript = (transcript: string) => {\n    transcript = transcript.toLowerCase()\n    for (let syn of syns) {\n        transcript = transcript.replaceAll(syn[0], syn[1])\n    }\n    return transcript\n}\n\nconst MessageBox = styled.div`\n    border: 2px solid tomato;\n    padding: 10px;\n    position: relative;\n`\n\nconst Chess = require('chess.js')\n\nconst checkContainsPiece = (chess: ChessInstance, transcript: string) => {\n    const transcriptedPart = transcript.match(/[a-hA-H]+\\s?[1-8]/g)\n    if (!transcriptedPart) return {}\n\n    const identifiedPiece = Object.entries(Pieces).reduce(\n        (acc: string | undefined, [key, syns]) => {\n            if (\n                syns.some((syn) => transcript.toLowerCase().includes(syn)) &&\n                !acc\n            ) {\n                return key\n            }\n            return acc\n        },\n        undefined\n    )\n\n    const toSquare = transcriptedPart[0]\n        .toLowerCase()\n        .replace(' ', '') as Square\n    if (identifiedPiece && toSquare) {\n        const possibleMoves = chess.SQUARES.filter((square) => {\n            const s = chess.get(square)\n            return s?.color === chess.turn() && s.type === identifiedPiece\n        })\n            .map((square) => {\n                const moves = chess\n                    .moves({ square, verbose: true })\n                    .filter((x) => x.to === toSquare)\n\n                if (moves.length === 1) return { from: square, to: toSquare }\n                return undefined\n            })\n            .filter((x) => x)\n\n        if (possibleMoves.length > 1) {\n            return { error: 'Multiple possible pieces for that move' }\n        } else {\n            return { move: possibleMoves[0] }\n        }\n    }\n    return {}\n}\n\nconst MainGame = ({\n    bPlayer,\n    wPlayer,\n    playTime,\n}: {\n    bPlayer: string\n    wPlayer: string\n    playTime: number\n}) => {\n    const [chess] = useState<ChessInstance>(\n        new Chess('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')\n    )\n    const [fen, setFen] = useState(chess.fen())\n    const { transcript, resetTranscript, listening } = useSpeechRecognition()\n    const [from, setFrom] = useState<Square | null>(null)\n    const [to, setTo] = useState<Square | null>(null)\n    const [selectedSquare, setSelectedSquare] = useState<Square | null>()\n    const [error, setError] = useState<string | null>()\n    const whitesTurn = chess.turn() === 'w'\n\n    const [wTimer, setWTimer] = useTimer(playTime, chess.turn() === 'w')\n    const [bTimer, setBTimer] = useTimer(playTime, chess.turn() === 'b')\n    const [lastMoveTime, setLastMoveTime] = useState<[number, number][] | null>(\n        [[playTime, playTime]]\n    )\n\n    useEffect(() => {\n        if (!transcript) return\n\n        const norm = normalizeTranscript(transcript)\n        console.log(norm)\n        // check if player says full command like \"a2 to a3\"\n        const transcriptedFull = transcript.match(\n            /[a-hA-H]+[1-8].*(?:to|2).*[a-hA-H]+[1-8]/g\n        )\n\n        if (transcriptedFull) {\n            const squares = transcriptedFull[0].toLowerCase()\n            setFrom(squares.substring(0, 3).trim() as Square)\n            setTo(squares.substring(squares.length - 2).trim() as Square)\n        } else {\n            const pieceMove = checkContainsPiece(chess, norm)\n            if (pieceMove.move) {\n                setFrom(pieceMove.move.from)\n                setTo(pieceMove.move.to)\n                return\n            } else if (pieceMove.error) {\n                setError(pieceMove.error || 'Did not understand')\n                return\n            }\n\n            // could be only a part has been said\n            const transcriptedPart = transcript.match(/[a-hA-H]+[1-8]/g)\n            if (transcriptedPart) {\n                const square = transcriptedPart[0].toLowerCase() as Square\n                if (from) {\n                    setTo(square)\n                } else {\n                    setFrom(square)\n                }\n                setError(null)\n                return\n            } else if (norm.includes('undo')) {\n                undoMove()\n            }\n        }\n    }, [transcript])\n\n    useEffect(() => {\n        if (from && to) {\n            handleMove({ from, to })\n            setFrom(null)\n            setTo(null)\n        }\n    }, [from, to])\n\n    const handleMove = (move: ShortMove) => {\n        setError(null)\n        if (chess.move(move)) {\n            setFen(chess.fen())\n\n            // Update undo timer values\n            setLastMoveTime((x) =>\n                x ? [[wTimer, bTimer], x[0]] : [[wTimer, bTimer]]\n            )\n        }\n    }\n\n    const toggleListening = () => {\n        if (listening) {\n            SpeechRecognition.stopListening()\n        } else {\n            resetTranscript()\n            setError(null)\n            SpeechRecognition.startListening({\n                continuous: false,\n                language: 'en-US',\n            })\n        }\n    }\n    const handleKeypress = (e: KeyboardEvent) => {\n        if (e.code === 'Space') {\n            e.preventDefault()\n            toggleListening()\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeypress)\n        return () => window.removeEventListener('keydown', handleKeypress)\n    }, [])\n\n    const handleSquareClick = (square: Square) => {\n        if (from) {\n            setTo(square)\n        } else {\n            setFrom(square)\n        }\n    }\n\n    const undoMove = () => {\n        if (lastMoveTime && lastMoveTime[1]) {\n            chess.undo()\n            const [wTime, bTime] = lastMoveTime[1]\n            setWTimer(wTime)\n            setBTimer(bTime)\n            setLastMoveTime((x) => (x ? [x[1]] : null))\n            setFen(chess.fen())\n        }\n    }\n\n    return (\n        <div className=\"mainwrapper\">\n            <div className=\"controls\">\n                <img\n                    className=\"logo\"\n                    onClick={toggleListening}\n                    src={magic}\n                    alt={'press to speak button'}\n                />\n                {listening\n                    ? 'Listening...'\n                    : 'Click to talk or press the Space key...'}\n                <button\n                    disabled={!(lastMoveTime && lastMoveTime[1])}\n                    onClick={undoMove}\n                >\n                    Undo\n                </button>\n                <div>\n                    {error && !listening && <MessageBox>{error}</MessageBox>}\n                </div>\n            </div>\n\n            <div>\n                <Space className=\"main\">\n                    <Layout id=\"layout\">\n                        <Sider\n                            className={`sideBar sideBarSlyth ${\n                                whitesTurn ? '' : 'active'\n                            }`}\n                            width=\"300\"\n                        >\n                            <SideBar\n                                player={bPlayer}\n                                playTime={playTime}\n                                marked={!whitesTurn}\n                                chess={chess}\n                                playerColor=\"b\"\n                                timer={bTimer}\n                                showTimer={playTime !== 0}\n                            />\n                        </Sider>\n                        <Content className=\"flex-center\">\n                            <Chessboard\n                                width={800}\n                                position={fen}\n                                onDrop={(move) => {\n                                    setFrom(null)\n                                    handleMove({\n                                        from: move.sourceSquare,\n                                        to: move.targetSquare,\n                                        promotion: 'q',\n                                    })\n                                }}\n                                squareStyles={{\n                                    ...(from\n                                        ? {\n                                              [from]: {\n                                                  backgroundColor: 'orange',\n                                              },\n                                          }\n                                        : {}),\n                                    ...(selectedSquare\n                                        ? {\n                                              [selectedSquare]: {\n                                                  backgroundColor: 'orange',\n                                              },\n                                          }\n                                        : {}),\n                                }}\n                                onSquareClick={handleSquareClick}\n                                onMouseOverSquare={setSelectedSquare}\n                            />\n                        </Content>\n                        <Sider\n                            width=\"300\"\n                            className={`sideBar sideBarGryf ${\n                                whitesTurn ? 'active' : ''\n                            }`}\n                        >\n                            <SideBar\n                                player={wPlayer}\n                                playTime={playTime}\n                                marked={whitesTurn}\n                                chess={chess}\n                                playerColor=\"w\"\n                                timer={wTimer}\n                                showTimer={playTime !== 0}\n                            />\n                        </Sider>\n                    </Layout>\n                </Space>\n            </div>\n        </div>\n    )\n}\n\nexport default MainGame\n","import React, { useState } from 'react'\nimport magic from './Magic.png'\n\nconst IntroInputField = (props: { handleSubmit: Function }) => {\n    const [bPlayer, setbPlayer] = useState('')\n    const [wPlayer, setwPlayer] = useState('')\n    const [playTime, setPlayTime] = useState<number>(0)\n\n    return (\n        <div className=\"intro\">\n            <img src={magic} alt={'logo'} />\n\n            <form\n                onSubmit={(e) => {\n                    props.handleSubmit(e, bPlayer, wPlayer, playTime)\n                }}\n            >\n                <div className=\"formItem\">\n                    <label>Name of Gryffindor player:</label>\n                    <input\n                        type=\"text\"\n                        value={wPlayer}\n                        required\n                        onChange={(e) => {\n                            setwPlayer(e.target.value)\n                        }}\n                    />\n                </div>\n                <div className=\"formItem\">\n                    <label>Name of Slytherin player:</label>\n                    <input\n                        type=\"text\"\n                        value={bPlayer}\n                        required\n                        onChange={(e) => {\n                            setbPlayer(e.target.value)\n                        }}\n                    />\n                </div>\n                <div className=\"formItem\">\n                    <label>Pick your chess timer:</label>\n                    <select\n                        value={playTime}\n                        onChange={(e) => {\n                            setPlayTime(parseInt(e.target.value))\n                        }}\n                        required\n                    >\n                        <option value={10}>10/10 Minutes</option>\n                        <option value={20}>20/20 Minutes</option>\n                        <option value={60}>60/60 Minutes</option>\n                        <option value={0}>without time limit</option>\n                    </select>\n                </div>\n                <input type=\"submit\" value=\"Start Game\" className=\"formItem\" />\n            </form>\n        </div>\n    )\n}\nexport default IntroInputField\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport MainGame from './MainGame'\nimport IntroInputField from './IntroInputField'\nimport './App.css'\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 30px;\n`\n\nconst App: React.FC = () => {\n    const [bPlayer, setbPlayer] = useState('')\n    const [wPlayer, setwPlayer] = useState('')\n    const [playTime, setPlayTime] = useState<number>(0)\n\n    const [gameHasStarted, setGameHasStarted] = useState(false)\n\n    const handleSubmit = (\n        e: React.FormEvent<HTMLFormElement>,\n        bName: string,\n        wName: string,\n        playingTime: number\n    ) => {\n        e.preventDefault()\n        setbPlayer(bName)\n        setwPlayer(wName)\n        setPlayTime(playingTime)\n        setGameHasStarted(true)\n    }\n\n    return (\n        <Container>\n            {gameHasStarted ? (\n                <MainGame\n                    bPlayer={bPlayer}\n                    wPlayer={wPlayer}\n                    playTime={playTime * 60}\n                />\n            ) : (\n                <IntroInputField handleSubmit={handleSubmit} />\n            )}\n        </Container>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}