{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Flexbox","Chess","require","App","useState","chess","isListening","setIsListening","useSpeechRecognition","transcript","resetTranscript","fen","setFen","className","width","position","onDrop","move","setTimeout","moves","length","computerMove","Math","floor","random","handleMove","from","sourceSquare","to","targetSquare","promotion","type","icon","MessageOutlined","onClick","SpeechRecognition","stopListening","startListening","continuous","language","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAYMA,EAAYC,IAAOC,IAAV,+HAOTC,EAAUF,IAAOC,IAAV,6EAKPE,EAAQC,EAAQ,IAyEPC,EAvEO,WAClB,MAAgBC,mBACZ,IAAIH,EAAM,6DADPI,EAAP,oBAGA,EAAsCD,oBAAS,GAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAwCC,iCAAhCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,gBAEpB,EAAsBN,mBAASC,EAAMM,OAArC,mBAAOA,EAAP,KAAYC,EAAZ,KAiCA,OACI,cAACf,EAAD,UACI,eAAC,IAAD,WACI,qBAAKgB,UAAU,cAAf,SACI,cAAC,IAAD,CACIC,MAAO,IACPC,SAAUJ,EACVK,OAAQ,SAACC,GAAD,OAtCT,SAACA,GACZZ,EAAMY,KAAKA,KACXC,YAAW,WACP,IAAMC,EAAQd,EAAMc,QAEpB,GAAIA,EAAMC,OAAS,EAAG,CAClB,IAAMC,EACFF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,SAC3Cf,EAAMY,KAAKI,GACXT,EAAOP,EAAMM,UAElB,KAEHC,EAAOP,EAAMM,QA0BGc,CAAW,CACPC,KAAMT,EAAKU,aACXC,GAAIX,EAAKY,aACTC,UAAW,WAK3B,eAAC9B,EAAD,WACI,cAAC,IAAD,CACI+B,KAAK,UACLC,KAAM,cAACC,EAAA,EAAD,IACNC,QAlCI,WAChB5B,GACAC,GAAe,GACf4B,IAAkBC,kBAElB1B,IACAH,GAAe,GACf4B,IAAkBE,eAAe,CAC7BC,YAAY,EACZC,SAAU,YAsBN,SAKKjC,EAAc,eAAiB,kBAEpC,gDAAmBG,cC1ExB+B,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.02858530.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Space } from 'antd'\nimport { MessageOutlined } from '@ant-design/icons'\n\nimport './App.css'\nimport Chessboard from 'chessboardjsx'\nimport { ChessInstance, ShortMove } from 'chess.js'\nimport SpeechRecognition, {\n    useSpeechRecognition,\n} from 'react-speech-recognition'\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 30px;\n`\n\nconst Flexbox = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n\nconst Chess = require('chess.js')\n\nconst App: React.FC = () => {\n    const [chess] = useState<ChessInstance>(\n        new Chess('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')\n    )\n    const [isListening, setIsListening] = useState(false)\n    const { transcript, resetTranscript } = useSpeechRecognition()\n\n    const [fen, setFen] = useState(chess.fen())\n\n    const handleMove = (move: ShortMove) => {\n        if (chess.move(move)) {\n            setTimeout(() => {\n                const moves = chess.moves()\n\n                if (moves.length > 0) {\n                    const computerMove =\n                        moves[Math.floor(Math.random() * moves.length)]\n                    chess.move(computerMove)\n                    setFen(chess.fen())\n                }\n            }, 300)\n\n            setFen(chess.fen())\n        }\n    }\n\n    const toggleListening = () => {\n        if (isListening) {\n            setIsListening(false)\n            SpeechRecognition.stopListening()\n        } else {\n            resetTranscript()\n            setIsListening(true)\n            SpeechRecognition.startListening({\n                continuous: true,\n                language: 'en-US',\n            })\n        }\n    }\n\n    return (\n        <Container>\n            <Space>\n                <div className=\"flex-center\">\n                    <Chessboard\n                        width={800}\n                        position={fen}\n                        onDrop={(move) =>\n                            handleMove({\n                                from: move.sourceSquare,\n                                to: move.targetSquare,\n                                promotion: 'q',\n                            })\n                        }\n                    />\n                </div>\n                <Flexbox>\n                    <Button\n                        type=\"primary\"\n                        icon={<MessageOutlined />}\n                        onClick={toggleListening}\n                    >\n                        {isListening ? 'Listening...' : 'Click to talk'}\n                    </Button>\n                    <span>Transcript: {transcript}</span>\n                </Flexbox>\n            </Space>\n        </Container>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}